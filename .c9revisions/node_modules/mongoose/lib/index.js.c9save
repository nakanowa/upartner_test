{"ts":1354026279591,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * Module dependencies.\n */\n\nvar Schema = require('./schema')\n  , SchemaType = require('./schematype')\n  , VirtualType = require('./virtualtype')\n  , SchemaTypes = Schema.Types\n  , SchemaDefaults = require('./schemadefault')\n  , Types = require('./types')\n  , Query = require('./query')\n  , Promise = require('./promise')\n  , Model = require('./model')\n  , Document = require('./document')\n  , utils = require('./utils')\n  , format = utils.toCollectionName\n  , mongodb = require('mongodb')\n\n/**\n * Mongoose constructor.\n *\n * The exports object of the `mongoose` module is an instance of this class.\n * Most apps will only use this one instance.\n *\n * @api public\n */\n\nfunction Mongoose () {\n  this.connections = [];\n  this.plugins = [];\n  this.models = {};\n  this.modelSchemas = {};\n  this.options = {};\n  this.createConnection(); // default connection\n};\n\n/**\n * Sets mongoose options\n *\n * ####Example:\n *\n *     mongoose.set('test', value) // sets the 'test' option to `value`\n *\n * @param {String} key\n * @param {String} value\n * @api public\n */\n\nMongoose.prototype.set = function (key, value) {\n  if (arguments.length == 1)\n    return this.options[key];\n  this.options[key] = value;\n  return this;\n};\n\n/**\n * Gets mongoose options\n *\n * ####Example:\n *\n *     mongoose.get('test') // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nMongoose.prototype.get = Mongoose.prototype.set;\n\n/*!\n * ReplSet connection string check.\n */\n\nvar rgxReplSet = /^.+,.+$/;\n\n/**\n * Creates a Connection instance.\n *\n * Each `connection` instance maps to a single database. This method is helpful when mangaging multiple db connections.\n *\n * If arguments are passed, they are proxied to either [Connection#open](#connection_Connection-open) or [Connection#openSet](#connection_Connection-openSet) appropriately. This means we can pass `db`, `server`, and `replset` options to the driver.\n *\n * ####Example:\n *\n *     // with mongodb:// URI\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database');\n *\n *     // and options\n *     var opts = { db: { native_parser: true }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database', opts);\n *\n *     // replica sets\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database,mongodb://anotherhost:port,mongodb://yetanother:port');\n *\n *     // and options\n *     var opts = { replset: { strategy: 'ping', rs_name: 'testSet' }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database,mongodb://anotherhost:port,mongodb://yetanother:port', opts);\n *\n *     // with [host, database_name[, port] signature\n *     db = mongoose.createConnection('localhost', 'database', port)\n *\n *     // and options\n *     var opts = { server: { auto_reconnect: false }, user: 'username', pass: 'mypassword' }\n *     db = mongoose.createConnection('localhost', 'database', port, opts)\n *\n *     // initialize now, connect later\n *     db = mongoose.createConnection();\n *     db.open('localhost', 'database', port, [opts]);\n *\n * @param {String} [uri] a mongodb:// URI\n * @param {Object} [options] options to pass to the driver\n * @see Connection#open #connection_Connection-open\n * @see Connection#openSet #connection_Connection-openSet\n * @return {Connection} the created Connection object\n * @api public\n */\n\nMongoose.prototype.createConnection = function () {\n  var conn = new Connection(this);\n  this.connections.push(conn);\n\n  if (arguments.length) {\n    if (rgxReplSet.test(arguments[0])) {\n      conn.openSet.apply(conn, arguments);\n    } else {\n      conn.open.apply(conn, arguments);\n    }\n  }\n\n  return conn;\n};\n\n/**\n * Opens the default mongoose connection.\n *\n * If arguments are passed, they are proxied to either [Connection#open](#connection_Connection-open) or [Connection#openSet](#connection_Connection-openSet) appropriately.\n *\n * @see Mongoose#createConnection #index_Mongoose-createConnection\n * @api public\n * @return {Mongoose} this\n */\n\nMongoose.prototype.connect = function () {\n  var conn = this.connection;\n\n  if (rgxReplSet.test(arguments[0])) {\n    conn.openSet.apply(conn, arguments);\n  } else {\n    conn.open.apply(conn, arguments);\n  }\n\n  return this;\n};\n\n/**\n * Disconnects all connections.\n *\n * @param {Function} [fn] called after all connection close.\n * @return {Mongoose} this\n * @api public\n */\n\nMongoose.prototype.disconnect = function (fn) {\n  var count = this.connections.length\n    , error\n\n  this.connections.forEach(function(conn){\n    conn.close(function(err){\n      if (error) return;\n\n      if (err) {\n        error = err;\n        if (fn) return fn(err);\n        throw err;\n      }\n\n      if (fn)\n        --count || fn();\n    });\n  });\n  return this;\n};\n\n/**\n * Defines a model or retrieves it.\n *\n * Models defined on the `mongoose` instance are available to all connection created by the same `mongoose` instance.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *\n *     // define an Actor model with this mongoose instance\n *     mongoose.model('Actor', new Schema({ name: String }));\n *\n *     // create a new connection\n *     var conn = mongoose.createConnection(..);\n *\n *     // retrieve the Actor model\n *     var Actor = conn.model('Actor');\n *\n * When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils.toCollectionName) method. This method pluralizes the name. Collection names can also be declared through schema options.\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String });\n *     schema.set('collection', 'actor');\n *\n * @param {String} name model name\n * @param {Schema} [schema]\n * @param {String} [collection] name (optional, induced from model name)\n * @param {Boolean} [skipInit] whether to skip initialization (defaults to false)\n * @api public\n */\n\nMongoose.prototype.model = function (name, schema, collection, skipInit) {\n  // normalize collection\n  if (!(schema instanceof Schema)) {\n    collection = schema;\n    schema = false;\n  }\n\n  if ('boolean' === typeof collection) {\n    skipInit = collection;\n    collection = null;\n  }\n\n  // look up models for the collection\n  if (!this.modelSchemas[name]) {\n    if (!schema && name in SchemaDefaults) {\n      schema = SchemaDefaults[name];\n    }\n\n    if (schema) {\n      this.modelSchemas[name] = schema;\n      for (var i = 0, l = this.plugins.length; i < l; i++) {\n        schema.plugin(this.plugins[i][0], this.plugins[i][1]);\n      }\n    } else {\n      throw new Error('Schema hasn\\'t been registered for model \"' + name + '\".\\n'\n                    + 'Use mongoose.model(name, schema)');\n    }\n  }\n\n  if (!this.models[name]) {\n    schema || (schema = this.modelSchemas[name]);\n    collection || (collection = schema.set('collection') || format(name));\n\n    var model = Model.compile(name\n                        , this.modelSchemas[name]\n                        , collection\n                        , this.connection\n                        , this);\n\n    if (!skipInit) model.init();\n\n    this.models[name] = model;\n  }\n\n  return this.models[name];\n};\n\n/**\n * Declares a global plugin executed on all Schemas.\n *\n * Equivalent to calling `.plugin(fn)` on each Schema you create.\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Mongoose} this\n * @api public\n */\n\nMongoose.prototype.plugin = function (fn, opts) {\n  this.plugins.push([fn, opts]);\n  return this;\n};\n\n/**\n * The default connection of the mongoose module.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     mongoose.connect(...);\n *     mongoose.connection.on('error', cb);\n *\n * This is the connection used by default for every model created using [mongoose.model](#index_Mongoose-model).\n *\n * @property connection\n * @return {Connection}\n * @api public\n */\n\nMongoose.prototype.__defineGetter__('connection', function(){\n  return this.connections[0];\n});\n\n/*!\n * Driver depentend APIs\n */\n\nvar driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native';\n\n/*!\n * Connection\n */\n\nvar Connection = require(driver + '/connection');\n\n/*!\n * Collection\n */\n\nvar Collection = require(driver + '/collection');\n\n/**\n * The exports object is an instance of Mongoose.\n *\n * @api public\n */\n\nmodule.exports = exports = new Mongoose;\nvar mongoose = module.exports;\n\n/**\n * The Mongoose Collection constructor\n *\n * @api public\n */\n\nmongoose.Collection = Collection;\n\n/**\n * The Mongoose Connection constructor\n *\n * @api public\n */\n\nmongoose.Connection = Connection;\n\n/**\n * Mongoose version\n *\n * @api public\n */\n\nmongoose.version = JSON.parse(\n  require('fs').readFileSync(__dirname + '/../package.json', 'utf8')\n).version;\n\n/**\n * The Mongoose constructor\n *\n * The exports of the mongoose module is an instance of this class.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var mongoose2 = new mongoose.Mongoose();\n *\n * @api public\n */\n\nmongoose.Mongoose = Mongoose;\n\n/**\n * The Mongoose Schema constructor\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var Schema = mongoose.Schema;\n *     var CatSchema = new Schema(..);\n *\n * @api public\n */\n\nmongoose.Schema = Schema;\n\n/**\n * The Mongoose SchemaType constructor.\n *\n * @api public\n */\n\nmongoose.SchemaType = SchemaType;\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @see Schema.SchemaTypes #schema_Schema-Types\n * @api public\n */\n\nmongoose.SchemaTypes = Schema.Types;\n\n/**\n * The Mongoose VirtualType constructor.\n *\n * @api public\n */\n\nmongoose.VirtualType = VirtualType;\n\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - Array\n * - Buffer\n * - Document\n * - Embedded\n * - DocumentArray\n * - ObjectId\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     var ObjectId = mongoose.Types.ObjectId;\n *     var id1 = new ObjectId;\n *\n * @api public\n */\n\nmongoose.Types = Types;\n\n/**\n * The Mongoose Query constructor.\n *\n * @api public\n */\n\nmongoose.Query = Query;\n\n/**\n * The Mongoose Promise constructor.\n *\n * @api public\n */\n\nmongoose.Promise = Promise;\n\n/**\n * The Mongoose Model constructor.\n *\n * @api public\n */\n\nmongoose.Model = Model;\n\n/**\n * The Mongoose Document constructor.\n *\n * @api public\n */\n\nmongoose.Document = Document;\n\n/**\n * The MongooseError constructor.\n *\n * @api public\n */\n\nmongoose.Error = require('./error');\n\n/**\n * The node-mongodb-native driver Mongoose uses.\n *\n * @api public\n */\n\nmongoose.mongo = require('mongodb');\n"]],"start1":0,"start2":0,"length1":0,"length2":10752}]],"length":10752}
